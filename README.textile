h2. Media URI Parser - MURI

A simple to use media URI Parser. Pass a URI in, get helpful information out.

MURI Currently supports:
* Youtube (Single videos and Playlists)
** "API documentation":http://code.google.com/apis/youtube/2.0/developers_guide_protocol_audience.html
* Vimeo (single videos and albums)
** "API documentation":http://vimeo.com/api/docs/simple-api
* Flickr (single images and sets)
** "API documentation":http://www.flickr.com/services/api/ or "[2]":http://developer.yahoo.com/flickr/
* Imageshack
* Photobucket
** "API documentation":http://photobucket.com/developer/documentation
* Twitpic
** "API documentation":http://twitpic.com/api.do
* Facebook (photos and albums)
** "API documentation":http://wiki.developers.facebook.com/index.php/API
* Picasa (photos)
** "API documentation":http://code.google.com/apis/picasaweb/docs/2.0/developers_guide.html

h3. Installation & basic usage

Install muri as a ruby gem (you might need to run this command as root by prepending @sudo@ to it):

<pre>
<code>
  $ gem install muri
</code>
</pre>

Using muri is just as easy!

<pre>
<code>
  a = Muri.parse('http://www.youtube.com/watch?v=blahblahblah&feature=rec-LGOUT-exp_fresh+div-1r-1-HM')
</code>
</pre>

If @a.valid?@ you are good to go. If not, either the URI host was not recognized, or the path/parameters provided along with a known URI host were not recognized. When these two types of errors are encountered, an exception is caught and returned in @a.errors@ as either "Muri::NoParser" or "Muri::UnrecognizedURI" (or potentially "URI::BadURIError" or "URI::InvalidURIError" if the URI passed is bad). If you don't care about the type of error, just whether the URI was parsed, @a.valid?@ will give you a boolean answer.

Assuming the URI was successfully parsed (thus @a.valid? == true@), all media types share several common attributes:

<pre>
<code>
  a.media_service         # 'Youtube'
  a.media_id              # 'blahblahblah'
  a.media_uri             # URI object for 'http://www.youtube.com/watch?v=blahblahblah&feature=rec-LGOUT-exp_fresh+div-1r-1-HM'
</code>
</pre>

*Due to variations in information which can be gathered from a uri, some services provide more information than others. For example:*

* All but Imageshack have a @media_api_id@, which is the ID which can be used in API calls to the related services. Typically the same as @media_id@.

<pre>
<code>
  a.media_api_id     # 'blahblahblah'
</code>
</pre>

* Services with a @media_api_id@ also have a @media_api_type@, which indicates what sort of API call should be made (be it 'photo', 'video', 'media', 'set', 'album', or 'playlist', depending on URI type)


*NOTE: Facebook photos return a @media_api_id@ which can be used to search for photo information in a Facebook photos.get API call as the pid. This pid is NOT the same as the pid found in the query string (the @media_id@)*

*ALSO NOTE: Picasa @media_api_id@ is a partial string for using the photo API call, so for example @'bananastalktome/album/TestForAPI/photoid/5450524726782297346'@, thus the API call would be @"http://picasaweb.google.com/data/feed/api/user/#{media_api_id}"@*


* A direct media url for Youtube, Photobucket (photos, not albums), Twitpic, Imageshack (@http://img#{num}.imageshack.us/img#{num}/#{NUMBER}/#{IMAGENAME}@ format) and flickr (@http://farm#{num}.static.flickr.com/@ format)
d

<pre>
<code>
  a.media_url         # 'http://www.youtube.com/v/blahblahblah'
</code>
</pre>

* A media landing website url for Facebook, Picasa, Youtube, Photobucket, Imageshack, Vimeo, Twitpic, and Flickr (flickr returns the @http://flic.kr/p/#{ID}@ short url)

<pre>
<code>
  a.media_website           # 'http://www.youtube.com/watch?v=blahblahblah'
</code>
</pre>

* Content type for Imageshack, Photobucket (photos, not albums) and Flickr (flickr in the @http://farm#{num}.static.flickr.com/@ format)

<pre>
<code>
  a.media_content_type      # 'jpg' (Content Type also for Imageshack and Photobucket)
</code>
</pre>

* Thumbnails URL for Youtube, Photobucket (photos, not albums), Twitpic, and Flickr (flickr in the @http://farm#{num}.static.flickr.com/@ format)

<pre>
<code>
  a.media_thumbnail   # 'http://i.ytimg.com/vi/4CYDFoEz8rg/default.jpg'
</code>
</pre>

*Some additional information may be provided, which can be determined by looking through each filters code.*


If an attribute is not present, muri returns @nil@.


h3. Contact

If you would like to get in contact with me, my email is bananastalktome@gmail.com. I appreciate any information or assistance reverse-engineering media website URI's. I plan on including more services _and_ more parse information with updates. That being said, MURI is currently not production quality. Please use with caution and in development only. Thank you.
